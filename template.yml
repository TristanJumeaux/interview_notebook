AWSTemplateFormatVersion: '2010-09-09'
Description: Deploys a simple instance with Jupyter Notebook listening on port 8888.
Parameters:

  KeyName:
    Description: Name of an existing EC2 KeyPair to enable SSH access to the instance
    Type: AWS::EC2::KeyPair::KeyName
    ConstraintDescription: must be the name of an existing EC2 KeyPair.

  InstanceType:
    Description: EC2 instance type
    Type: String
    Default: t2.micro
    AllowedValues: 
      - t2.micro
      - t2.large
      - t2.small
    Description: Enter instance type of EC2. Default is t2.large.

  AMI:
    Description: AMI (Default is Amazon Linux x86)
    Type: String
    # Default: ami-f4cc1de2 # Ubuntu
    Default: ami-0de12f76efe134f2f # Amazon Linux

  Location:
    Description: The IP address range.
    Type: String
    MinLength: '9'
    MaxLength: '18'
    Default: '0.0.0.0/0'
    AllowedPattern: (\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})
    ConstraintDescription: must be a valid IP CIDR range of the form x.x.x.x/x.

  useVPC:
    Type: AWS::EC2::VPC::Id
    Description: "VPC to deploy the cluster into."
    Default: vpc-a129cec9

  useSubnet:
    Type: AWS::EC2::Subnet::Id
    Description: "Subnet to deploy the cluster into. Must be in the selected VPC."
    Default: subnet-6af8fa03

Resources:
  MyInstance:
    Type: AWS::EC2::Instance
    Properties:
      InstanceType: !Ref 'InstanceType'
      SecurityGroupIds:
        - !Ref 'InstanceSecurityGroup'
      KeyName: !Ref 'KeyName'
      ImageId: !Ref 'AMI'
      SubnetId: !Ref 'useSubnet'
      Tags:
        - Key: Name
          Value: Ippon Interview's instance

      UserData:
        Fn::Base64: !Sub 
            - |

              #!/bin/bash 

              cd home/ec2-user

              ##### Download Anaconda
              wget https://repo.anaconda.com/archive/Anaconda3-2020.02-Linux-x86_64.sh 

              echo "DOWNLOAD SUCCESSFUL"

              ##### Install Anaconda
              bash Anaconda3-2020.02-Linux-x86_64.sh -b -p /home/ec2-user/anaconda3

              echo "INSTALL SUCCESSFUL"


              ##### Add SystemD to launch Jupyter at the restart of the machine

              echo "[Unit]" > ${SYSTEMDJUPYTERFILE}
              echo "Description= Script to launch Jupyter at start of the machine. " >> ${SYSTEMDJUPYTERFILE}
              echo "" >> ${SYSTEMDJUPYTERFILE}
              echo "Wants=network-online.target" >> ${SYSTEMDJUPYTERFILE} # Indique que le script a besoin de l'accès à Internet 
              echo "After=network-online.target" >> ${SYSTEMDJUPYTERFILE} # pour son bon fonctionnement
              echo "" >> ${SYSTEMDJUPYTERFILE}
              
              echo "[Service]" >> ${SYSTEMDJUPYTERFILE}
              echo "User=ec2-user" >> ${SYSTEMDJUPYTERFILE}
              echo "Group=ec2-user" >> ${SYSTEMDJUPYTERFILE}
              echo "ExecStart=/home/ec2-user/autostart/jupyter.sh" >> ${SYSTEMDJUPYTERFILE}
              echo "" >> ${SYSTEMDJUPYTERFILE}
              
              echo "[Install]" >> ${SYSTEMDJUPYTERFILE}
              echo "WantedBy=default.target" >> ${SYSTEMDJUPYTERFILE}

              ##### End SystemD and make it executable
              chmod +x ${SYSTEMDJUPYTERFILE}

              ##### Add Script to run Jupyter

              mkdir -p /home/ec2-user/autostart/
              echo "#!/bin/bash" > /home/ec2-user/autostart/jupyter.sh
              echo "source /home/ec2-user/anaconda3/bin/activate" >> /home/ec2-user/autostart/jupyter.sh
              echo "jupyter notebook --NotebookApp.ip='*' --NotebookApp.token='IPPONINTERVIEW'" >> /home/ec2-user/autostart/jupyter.sh

              ##### Add permissions and make jupyter.sh executable
              chmod +x /home/ec2-user/autostart/jupyter.sh
              chown ec2-user:ec2-user -R /home/ec2-user/autostart/

              # Enable SystemD
              systemctl start jupyter
              systemctl enable jupyter

              echo "UserData Done !"
              reboot
            - SYSTEMDJUPYTERFILE : /etc/systemd/system/jupyter.service


  InstanceSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Group for EC2 instance
      SecurityGroupIngress:
        - IpProtocol: tcp
          ToPort: '80'
          FromPort: '80'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          ToPort: '443'
          FromPort: '443'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          ToPort: '8888'
          FromPort: '8888'
          CidrIp: '0.0.0.0/0'
        - IpProtocol: tcp
          ToPort: '22'
          FromPort: '22'
          CidrIp: !Ref 'Location'
      VpcId: !Ref 'useVPC'

    Type: AWS::EC2::SecurityGroup
